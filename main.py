from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService, Session  # Importamos Session
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import os
from dotenv import load_dotenv

load_dotenv()
google_api = os.getenv("GOOGLE_API_KEY")

# Criar o servi√ßo de sess√£o uma vez
session_service = InMemorySessionService()

def call_agent(agent: Agent, message_text: str, user_id: str = "user_sistema", session_id: str = "session_unica"):
    session = session_service.create_session(app_name=agent.name, user_id=user_id, session_id=session_id)
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])
    final_response = ""
    for event in runner.run(user_id=user_id, session_id=session.id, new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
                    final_response += "\n"
    return final_response

def criar_agente(name, model, description, instruction, tools=None):
    if tools is None:
        tools = []
    agente = Agent(
        name=name,
        model=model,
        description=description,
        tools=tools,
        instruction=instruction
    )
    return agente

# --- Defini√ß√£o dos Agentes (mantendo como est√£o por enquanto) ---
def agente_buscador(topico, data_de_hoje):
    buscador = criar_agente(
        name="agente_buscador",
        model="gemini-2.0-flash",
        description="Agente de busca no google",
        tools=[google_search],
        instruction="""
        voc√™ √© um especilista em buscar tend√™ncias de post e mercado relacionado a tecnologia. Voc√™ foi contratado pela Codex System, uma startup especilizada em criar solu√ß√µes em python para marketing digital, jur√≠dico, profissionais da sa√∫de, varejo, restaurantes/lanchonetes, log√≠stica, firmas de contabilidade ou finan√ßas e imobili√°rias. Seu trabalho √© ser um assistente atendo com as novidades que voc√™ pode pesquisar no google search(google search) e saber quais solu√ß√µes essas p√∫blicos precisam que sejam criadas, focando nas dores reais e cases reais e muito impactantes, com grande nomes. Voc√™ deve sempre se basear na atualidade, no m√°ximo at√© 5 meses para selecionar o t√≥pico
        """
    )
    entrada_do_agente_buscador = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}"
    lancamentos_buscados = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos_buscados

def agente_planejador(topico, lancamentos_buscados):
    planejador = criar_agente(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um planejador de posts, especialista em redes sociais. Com base na lista na pesquisa do agente buscador. Voc√™ deve:
        usar a ferramentas do google search (google search) para criar um plano sobre quais os pontos mais relevantes que
        poder√≠amos abordar em um post
        sobre cada um deles. Voc√™ pode usar o google search para achar mais informa√ß√µes sobre os temas. Ao planejar os posts, voc√™ deve sempre focar nas vantagens que as solu√ß√µes abordadas anteriormente trazem para o nicho escolhido, e sempre focar nisso. Nunca em como vai ser construido, isso n√£o interessa ao consumir final

        ao final voc√™ ir√° escolher o tema mais relevante entre suas pesquisas e retornar esse tema, seus pontos mais relevantes
        e um plano com os assuntos a serem abordados que ser√°
        escrito posteriormente
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )
    entrada_do_agente_planejador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

def agente_redator(topico, plano_de_post):
    redator = criar_agente(
        name="agente_redator",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
        Voc√™ √© um Redator Criativo especializado em criar posts virais para redes sociais.
        Voc√™ escreve posts para a startuo Codex System, uma pequena empreitada de dois amigos apaixonados por solucionar problemas em programa√ß√£o python
        Utilize o tema fornecido no plano de post e os pontos mais relevantes fornecidos e, com base nisso,
        escreva um rascunho de post para Instagram sobre o tema indicado.
        O post deve ser engajador, informativo, com linguagem simples e incluir 2 a 4 hashtags no final.
        """,
        description="Agente redator de posts engajadores para Instagram"
    )
    entrada_do_agente_redator = f"T√≥pico: {topico}\nPlano de post: {plano_de_post}"
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

def agente_revisor(topico, rascunho_gerado):
    revisor = criar_agente(
        name="agente_revisor",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
        Voc√™ √© um Editor e Revisor de Conte√∫do meticuloso, especializado em posts para redes sociais, com foco no Instagram.
        Por ter um p√∫blico marketing digital, jur√≠dico, profissionais da sa√∫de, varejo, restaurantes/lanchonetes, log√≠stica, firmas de contabilidade ou finan√ßas e imobili√°rias, use um tom de escrita adequado, que tenha palavras chave do p√∫blico escolhido.
        Revise o rascunho de post de Instagram abaixo sobre o t√≥pico indicado, verificando clareza, concis√£o, corre√ß√£o e tom.
        Se o rascunho estiver bom, responda apenas 'O rascunho est√° √≥timo e pronto para publicar!'.
        Caso haja problemas, aponte-os e sugira melhorias.
        """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_do_agente_revisor = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

def main():
    data_de_hoje = date.today().strftime("%d/%m/%Y")
    print("üöÄ Iniciando o Sistema de Cria√ß√£o de Posts para Instagram com 4 Agentes üöÄ")

    topico = input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer criar o post de tend√™ncias: ")

    if not topico:
        print("Voc√™ esqueceu de digitar o t√≥pico.")
        return

    print(f"Maravilha! Vamos trabalhar no post sobre novidades em {topico}.")

    lancamentos = None
    plano_de_post = None
    rascunho_de_post = None
    texto_revisado = None

    while True:
        print("\nOp√ß√µes:")
        print("1. Buscar")
        print("2. Planejar post")
        print("3. Redigir rascunho")
        print("4. Revisar post")
        print("5. Mostrar resultado final")
        print("6. Digitar novo assunto")
        print("7. Sair") # Alterei a op√ß√£o de sair para 7

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            lancamentos = agente_buscador(topico, data_de_hoje)
            print("\nLan√ßamentos encontrados:")
            print(lancamentos)
        elif opcao == "2":
            if lancamentos:
                plano_de_post = agente_planejador(topico, lancamentos)
                print("\nPlano do post:")
                print(plano_de_post)
            else:
                print("Por favor, busque os lan√ßamentos primeiro (op√ß√£o 1).")
        elif opcao == "3":
            if plano_de_post:
                rascunho_de_post = agente_redator(topico, plano_de_post)
                print("\nRascunho do post:")
                print(rascunho_de_post)
            else:
                print("Por favor, planeje o post primeiro (op√ß√£o 2).")
        elif opcao == "4":
            if rascunho_de_post:
                texto_revisado = agente_revisor(topico, rascunho_de_post)
                print("\nTexto revisado:")
                print(texto_revisado)
            else:
                print("Por favor, redija o rascunho primeiro (op√ß√£o 3).")
        elif opcao == "5":
            if texto_revisado:
                print("\nResultado Final:")
                print(texto_revisado)
            elif rascunho_de_post:
                print("\nResultado Final (Rascunho n√£o revisado):")
                print(rascunho_de_post)
            elif plano_de_post:
                print("\nResultado Final (Apenas plano):")
                print(plano_de_post)
            elif lancamentos:
                print("\nResultado Final (Apenas lan√ßamentos):")
                print(lancamentos)
            else:
                print("Nenhum resultado gerado ainda.")
        elif opcao == "6":
            print("\nVamos come√ßar com um novo assunto.")
            topico = input("‚ùì Digite o novo T√ìPICO: ")
            print(f"Maravilha! Vamos trabalhar no post sobre novidades em {topico}.")
            # Limpar as vari√°veis de estado para o novo t√≥pico
            lancamentos = None
            plano_de_post = None
            rascunho_de_post = None
            texto_revisado = None
        elif opcao == "7": # A op√ß√£o de sair agora √© 7
            print("Encerrando o sistema.")
            break
        else:
            print("Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes.")

if __name__ == "__main__":
    main()